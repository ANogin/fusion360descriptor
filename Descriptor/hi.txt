for body in self.body_lst:
            for x in range(len(self.body_dict_list)):
                dict = {}
                dict = self.body_dict_list[x]
                try:
                    if dict[body.name] == self.name:
                        body.name = body.name.replace(':','_').replace(' ','')

                        visual = SubElement(link, 'visual')
                        origin_v = SubElement(visual, 'origin')
                        origin_v.attrib = {'xyz':' '.join([str(_) for _ in self.xyz]), 'rpy':'0 0 0'}
                        geometry_v = SubElement(visual, 'geometry')
                        mesh_v = SubElement(geometry_v, 'mesh')
                        mesh_v.attrib = {'filename':f'package://{self.sub_folder}{self.name}_{body.name}.stl','scale':f'{Link.mesh_scale} {Link.mesh_scale} {Link.mesh_scale}'}
                        # mesh_v.attrib = {'filename':'package://' + self.repo + self.name + '.stl','scale':'0.001 0.001 0.001'}
                        material = SubElement(visual, 'material')
                        material.attrib = {'name':'silver'}
                except Exception: 
                    pass

                    #self.body_lst[0].name


for body in self.body_lst:
            for x in range(len(self.body_dict_list)):
                dict = {}
                dict = self.body_dict_list[x]
                try:
                    if dict[self.name] == body.name:
                        body.name = body.name.replace(':','_').replace(' ','')
                        visual = SubElement(link, 'visual')
                        origin_v = SubElement(visual, 'origin')
                        origin_v.attrib = {'xyz':' '.join([str(_) for _ in self.xyz]), 'rpy':'0 0 0'}
                        geometry_v = SubElement(visual, 'geometry')
                        mesh_v = SubElement(geometry_v, 'mesh')
                        mesh_v.attrib = {'filename':f'package://{self.sub_folder}{self.name}_{body.name}.stl','scale':f'{Link.mesh_scale} {Link.mesh_scale} {Link.mesh_scale}'}
                        # mesh_v.attrib = {'filename':'package://' + self.repo + self.name + '.stl','scale':'0.001 0.001 0.001'}
                        material = SubElement(visual, 'material')
                        material.attrib = {'name':'silver'}
                    break
                #dict = {}
                
                except Exception: 
                    pass                    


                    # for body in self.body_lst:
        #     for x in range(len(self.body_dict_list)):
        #         try:
        #             if self.body_dict_list[x][self.name].__eq__(body.name):
        #                 b = self.body_dict_list[x][self.name]
        #                 body.name = body.name.replace(':','_').replace(' ','')
        #                 visual = SubElement(link, 'visual')
        #                 origin_v = SubElement(visual, 'origin')
        #                 origin_v.attrib = {'xyz':' '.join([str(_) for _ in self.xyz]), 'rpy':'0 0 0'}
        #                 geometry_v = SubElement(visual, 'geometry')
        #                 mesh_v = SubElement(geometry_v, 'mesh')
        #                 mesh_v.attrib = {'filename':f'package://{self.sub_folder}{self.name}_{body.name}.stl','scale':f'{Link.mesh_scale} {Link.mesh_scale} {Link.mesh_scale}'}
        #                 # mesh_v.attrib = {'filename':'package://' + self.repo + self.name + '.stl','scale':'0.001 0.001 0.001'}
        #                 material = SubElement(visual, 'material')
        #                 material.attrib = {'name':'silver'}
        #                 #break
        #         except Exception:
        #             pass
        
        #visual
        # for body in self.body_lst:
        #     visual = SubElement(link, 'visual')
        #     origin_v = SubElement(visual, 'origin')
        #     origin_v.attrib = {'xyz':' '.join([str(_) for _ in self.xyz]), 'rpy':'0 0 0'}
        #     geometry_v = SubElement(visual, 'geometry')
        #     mesh_v = SubElement(geometry_v, 'mesh')
        #     mesh_v.attrib = {'filename':f'package://{self.sub_folder}{self.name}_{strr}.stl','scale':f'{Link.mesh_scale} {Link.mesh_scale} {Link.mesh_scale}'}
        #     # mesh_v.attrib = {'filename':'package://' + self.repo + self.name + '.stl','scale':'0.001 0.001 0.001'}
        #     material = SubElement(visual, 'material')
        #     material.attrib = {'name':'silver'}


        #iterate through list of bodies
        # for body in self.body_lst:
        #     #for x in range(len(self.body_dict_list)):
        #     # try:
        #     if self.body_dict_list[body.name] == self.name:
        #         body.name = body.name.replace(':','_').replace(' ','')
        #         visual = SubElement(link, 'visual')
        #         origin_v = SubElement(visual, 'origin')
        #         origin_v.attrib = {'xyz':' '.join([str(_) for _ in self.xyz]), 'rpy':'0 0 0'}
        #         geometry_v = SubElement(visual, 'geometry')
        #         mesh_v = SubElement(geometry_v, 'mesh')
        #         mesh_v.attrib = {'filename':f'package://{self.sub_folder}{self.name}_{body.name}.stl','scale':f'{Link.mesh_scale} {Link.mesh_scale} {Link.mesh_scale}'}
        #         # mesh_v.attrib = {'filename':'package://' + self.repo + self.name + '.stl','scale':'0.001 0.001 0.001'}
        #         material = SubElement(visual, 'material')
        #         material.attrib = {'name':'silver'}

            # except Exception:
            #     pass